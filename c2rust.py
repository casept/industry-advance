#!/usr/bin/env python3

# This script converts C arrays generated by grit to Rust arrays.

import re
import os

extract_asset_name_regex = re.compile(r"//\{\{BLOCK\((.*)\)")
find_array_regex = re.compile(r".* (.*)\[(\d+)\]")


def __c_to_rust_type(c_type_line: str) -> str:
    if "unsigned short" in c_type_line:
        return "u16"
    elif "unsigned int" in c_type_line:
        return "u32"
    elif "unsigned char" in c_type_line:
        return "u8"
    else:
        raise Exception("Unknown C type: {}".format(c_type_line))


def __camel_to_snake_case(name: str) -> str:
    # Walk through string, inserting "_" before each capital letter
    new_name: str = ""
    for char in name:
        if char.isupper():
            new_name = "{}{}{}".format(new_name, "_", char)
        else:
            new_name = "{}{}".format(new_name, char)

    # Uppercase entire string
    return new_name.upper()


def convert(c_file_path, rust_file_path):
    with open(c_file_path, "r") as cf:
        with open(rust_file_path, "w+") as rf:
            rust_lines = []
            for line in cf:
                # Just copy line-by-line until we find array containing data
                if find_array_regex.match(line):
                    # Take the length and name of the array, and replace the C declaration with a Rust one
                    line_regex = find_array_regex.search(line)
                    # Determine the width of the type
                    rust_type = __c_to_rust_type(line)
                    rust_name = __camel_to_snake_case(line_regex.group(1))
                    rust_line = "pub(crate) const {}: [{}; {}] = [\n".format(
                        rust_name, rust_type, line_regex.group(2)
                    )
                    rust_lines.append(rust_line)
                # If the line is an opening brace, remove it
                elif "{" in line:
                    pass
                # If the line is an end of C array, convert it to Rust syntax
                elif "};" in line:
                    rust_line = "];"
                    rust_lines.append(rust_line)
                # If the line is any other, leave it alone
                else:
                    rust_lines.append(line)

            rf.writelines(rust_lines)
    os.remove(c_file_path)
